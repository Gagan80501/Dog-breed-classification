# -*- coding: utf-8 -*-
"""model train

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZRVjojiZjDgQ3DBf5LPjjapD_7CkE7OR
"""

# ====== Setup Kaggle API & Download Dataset ======
!pip install -q kaggle
import os

os.makedirs("/root/.kaggle", exist_ok=True)
with open("/root/.kaggle/kaggle.json", "w") as f:
    f.write('{"username":"gagan8050","key":"78acb04ea718f86adb51805ef1c5716a"}')
os.chmod("/root/.kaggle/kaggle.json", 0o600)

!kaggle competitions download -c dog-breed-identification -p /content --force
!unzip -o /content/dog-breed-identification.zip -d /content/dog_breed_data

# ====== Import Libraries ======
import cv2, numpy as np, pandas as pd
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# ====== Load and Filter Labels ======
def load_labels(csv_path, top_n=3, samples_per_breed=40):
    df = pd.read_csv(csv_path)
    top_breeds = df['breed'].value_counts().index[:top_n]
    filtered_df = df[df['breed'].isin(top_breeds)].groupby('breed').head(samples_per_breed).reset_index(drop=True)
    return filtered_df

labels_df = load_labels("/content/dog_breed_data/labels.csv")
print(f"Selected breeds: {labels_df['breed'].unique().tolist()}")

# ====== Load and Resize Grayscale Images ======
def load_images(df, img_dir, size=(128, 128)):
    images, labels = [], []
    for _, row in tqdm(df.iterrows(), total=len(df)):
        path = os.path.join(img_dir, row['id'] + ".jpg")
        img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
        if img is not None:
            img = cv2.resize(img, size)
            images.append(img)
            labels.append(row['breed'])
    return images, labels

images, labels = load_images(labels_df, "/content/dog_breed_data/train")
print(f"Loaded {len(images)} images from {len(set(labels))} breeds.")

# ====== Feature Extraction from Grayscale Images ======
def extract_features(images):
    return np.array([
        cv2.normalize(cv2.calcHist([img], [0], None, [32], [0,256]), None).flatten()
        for img in images
    ])

features = extract_features(images)
labels = np.array(labels)

# ====== Encode Labels ======
le = LabelEncoder()
y = le.fit_transform(labels)

# ====== Scale Features ======
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# ====== Split Data ======
X_train, X_test, y_train, y_test = train_test_split(features_scaled, y, test_size=0.5, stratify=y, random_state=50)

# ====== Train & Evaluate SVM ======
svm_model = SVC(kernel='rbf', gamma='scale')
svm_model.fit(X_train, y_train)
svm_pred = svm_model.predict(X_test)

print(f"\nâœ… SVM Accuracy: {accuracy_score(y_test, svm_pred)*100:.2f}%")
print("\nðŸ“Š SVM Classification Report:\n", classification_report(y_test, svm_pred, target_names=le.classes_))

# ====== Train & Evaluate Logistic Regression ======
log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)
log_pred = log_model.predict(X_test)

print(f"\nâœ… Logistic Regression Accuracy: {accuracy_score(y_test, log_pred)*100:.2f}%")
print("\nðŸ“Š Logistic Regression Classification Report:\n", classification_report(y_test, log_pred, target_names=le.classes_))

# ====== Optional: Preview Sample Images ======
def show_samples(images, labels, n=6):
    plt.figure(figsize=(24, 6))
    for i in range(n):
        plt.subplot(2, 3, i+1)
        plt.imshow(images[i], cmap='gray')
        plt.title(labels[i])
        plt.axis('off')
    plt.tight_layout()
    plt.show()

show_samples(images, labels)